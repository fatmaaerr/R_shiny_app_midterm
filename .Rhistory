install.packages("shiny")
install.packages("flexdashboard")
library(flexdashboard)
rmarkdown::draft("dashboard.Rmd", template = "flex_dashboard", package = "flexdashboard")
library(flexdashboard)
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
Numeric.Variables = c("Customer_Age", "Total_Trans_Ct", "Credit_Limit")
data <- read.csv("BankChurners.csv")
Categorical.Variables = c("Gender", "Education_Level", "Marital_Status")
Numeric.Variables = c("Customer_Age", "Total_Trans_Ct", "Credit_Limit")
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
data <- read.csv("BankChurners.csv")
Categorical.Variables = c("Gender", "Education_Level", "Marital_Status")
Numeric.Variables = c("Customer_Age", "Total_Trans_Ct", "Credit_Limit")
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
data <- read.csv("BankChurners.csv")
Categorical.Variables = c("Gender", "Education_Level", "Marital_Status")
Numeric.Variables = c("Customer_Age", "Total_Trans_Ct", "Credit_Limit")
selectInput(inputId="categorical_variable", label = "Select Categorical Variable:", choices = Categorical.Variables, selected = Categorical.Variables[1])
selectInput(inputId="numeric_variable", label = "Select Numeric Variable:", choices = Numeric.Variables, selected = Numeric.Variables[1])
renderPlotly({
plot_ly(data,
x = ~data[[input$numeric_variable]],
color = ~data[[input$categorical_variable]],
colors = "Paired",
type = "box") %>%
layout(title = "",
xaxis = list(title = "" ,
zeroline = FALSE))
})
renderPlotly({
data %>%
count(var = data[[input$categorical_variable]], name = "count") %>%
plot_ly( x = ~var, y = ~ count, type = "bar", marker = list(color = '#008ae6',
line = list(color = '#008ae6', width = 2)), hoverinfo = "x+y") %>%
add_text(text = ~paste0( " (",   scales::percent(count/sum(count)),")"),
textposition = "bottom",
textfont = list(size = 12, color = "white"),
showlegend = FALSE) %>%
layout(xaxis = list(title = ""), yaxis = list(title = ""))
})
renderPlotly({
plot_ly(x = data[[input$numeric_variable]], type = "histogram",  marker = list(color = "#008ae6",
line = list(color = "darkgray",
width = 1)))
})
fsd
View(data)
runApp('R_Shiny_app_2')
library(shiny)
library(ggplot2)
library(plyr)
library(dplyr)
runApp('R_Shiny_app_2')
runApp('R_Shiny_app_2')
runApp('Melborn_House price')
runApp('Melborn_House price')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(ggmap)
library(lubridate)
library(shinyjs)
runApp('Melborn_House price')
runApp('Melborn_House price')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
#library(highcharter)
library(ggmap)
library(lubridate)
library(shinyjs)
runApp('Melborn_House price')
runApp('Melborn_House price')
runApp('HelloW_shiny_app')
runApp('~/R_Shiny_app_2')
rmarkdown::render("report dashboard.Rmd")
library(flexdashboard)
library(flexdashboard)
rmarkdown::render("report dashboard.Rmd")
rmarkdown::render("report dashboard.Rmd")
library(flexdashboard)
library(flexdashboard)
rmarkdown::render("report dashboard.Rmd")
rmarkdown::render("reportdashboard.Rmd")
rmarkdown::render("reportdashboard.Rmd)
""
rmarkdown::render("reportdashboard.Rmd)
rmarkdown::render("reportdashboard.Rmd")
rmarkdown::render("reportdashboard.Rmd")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
rmarkdown::render("report dash.Rmd")
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
install.packages("shinydashboard")
## ui.R ##
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
shinyApp(ui, server)
shinyApp(ui, server)
shiny::runApp('DataSet')
runApp('~/Melborn_House price')
runApp('Melborn_House price')
#library(highcharter)
library(ggmap)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
#library(highcharter)
library(ggmap)
library(lubridate)
library(shinyjs)
runApp('Melborn_House price')
runApp('Melborn_House price')
runApp('Melborn_House price')
runApp('Melborn_House price')
library(flexdashboard)
rmarkdown::draft("dashboard.Rmd", template = "flex_dashboard", package = "flexdashboard")
rmarkdown::draft("dashboard2.Rmd", template = "flex_dashboard", package = "flexdashboard")
---
title: "single column"
output:
flexdashboard::flex_dashboard:
vertical_layout: fill
---
shiny::runApp('DataSet')
runApp('~/NewApp')
shinyApp(ui, server)
library(shiny)
runApp('Plotgraf')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
#library(highcharter)
library(ggmap)
library(lubridate)
library(shinyjs)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
#library(highcharter)
library(ggmap)
library(lubridate)
library(shinyjs)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
#library(highcharter)
library(ggmap)
library(lubridate)
library(shinyjs)
runApp('Plotgraf')
runApp('Plotgraf')
runApp('HelloW_shiny_app')
runApp('~/DataSet')
runApp('~/HelloW_shiny_app')
runApp('~/NewApp')
runApp('~/Plotgraf')
runApp('DataSet')
runApp('~/HelloW_shiny_app')
runApp('~/Plotgraf')
ui <- fluidPage(
fluidRow(
column(width = 4,
plotOutput("plot1", height = 300,
# Equivalent to: click = clickOpts(id = "plot_click")
click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)
)
)
),
fluidRow(
column(width = 6,
h4("Points near click"),
verbatimTextOutput("click_info")
),
column(width = 6,
h4("Brushed points"),
verbatimTextOutput("brush_info")
)
)
)
library(ggplot2)
library(Cairo)   # For nicer ggplot2 output when deployed on Linux
# We'll use a subset of the mtcars data set, with fewer columns
# so that it prints nicely
mtcars2 <- mtcars[, c("mpg", "cyl", "disp", "hp", "wt", "am", "gear")]
ui <- fluidPage(
fluidRow(
column(width = 4,
plotOutput("plot1", height = 300,
# Equivalent to: click = clickOpts(id = "plot_click")
click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)
)
)
),
fluidRow(
column(width = 6,
h4("Points near click"),
verbatimTextOutput("click_info")
),
column(width = 6,
h4("Brushed points"),
verbatimTextOutput("brush_info")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars2, aes(wt, mpg)) + geom_point()
})
output$click_info <- renderPrint({
# Because it's a ggplot2, we don't need to supply xvar or yvar; if this
# were a base graphics plot, we'd need those.
nearPoints(mtcars2, input$plot1_click, addDist = TRUE)
})
output$brush_info <- renderPrint({
brushedPoints(mtcars2, input$plot1_brush)
})
}
shinyApp(ui, server)
runApp('DENEME2')
runApp('~/Plotgraf')
runApp('DataSet')
runApp('~/irisdata')
data("iris")
runApp('~/DENEME2')
runApp('Plotgraf')
runApp('~/irisdata')
runApp('irisdata')
runApp('DataSet')
runApp('Plotgraf')
runApp('Plotgraf')
runApp('~/HelloW_shiny_app')
runApp('ödev')
data("us_contagious_diseases")
data("us_contagious_diseases")
force(us_contagious_diseases)
runApp('ödev')
runApp('ödev')
runApp('ödev')
View(us_contagious_diseases)
runApp('ödev')
runApp('ödev')
runApp()
runApp('ödev')
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(ilce, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(ilce, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
house <- read("Analiz_data.xlsx")
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(ilce, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
house <- read_excel("Analiz_data.xlsx")
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
# Loading
library("readxl")
house <- read_excel("Analiz_data.xlsx")
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(ilce, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
# Loading
library("readxl")
house <- read_excel("C:\Users\fatma.er\Documents\ödev\Analiz_data.xlsx")
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(ilce, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
# Loading
library("readxl")
house <- read_excel("C:/Users/fatma.er/Documents/ödev/Analiz_data.xlsx")
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(ilce, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
# Loading
library("readxl")
house <- read_excel("C:/Users/fatma.er/Documents/ödev/Analiz_data.xlsx")
#data("us_contagious_diseases")
#disease <- us_contagious_diseases
house <- mutate(house, fiyat ) %>%
pivot_longer(cols = c(Oda_Sayisi, fiyat),
names_to = "data", values_to = "value")
runApp('ödev')
runGitHub("R_shiny_app_midterm","fatmaaerr",ref = "main")
runGitHub
runGitHub("R_shiny_app_midterm","fatmaaerr",ref = "main")
runApp('~/R_shiny_app_midterm_967585')
shiny::runApp('HelloW_shiny_app')
house <- read_excel("C:/Users/fatma.er/Documents/ödev/Analiz_data.xlsx")
shiny::runApp('R_shiny_app_midterm_967585')
